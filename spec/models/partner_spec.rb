require 'rails_helper'

describe Partner, type: :model do
  subject(:partner) { build_stubbed :partner }

  it { is_expected.to be_valid }

  describe 'validations' do
    it { is_expected.to validate_presence_of :name }
    it { is_expected.to validate_presence_of :province }
    it { is_expected.to belong_to :province }
    it { is_expected.to belong_to :status }

    it do
      create :partner
      expect(partner).to validate_uniqueness_of :name
    end

    context 'when start_date is set in the future' do
      before { partner.partnership_start_date = Date.tomorrow }
      it { is_expected.not_to be_valid }
    end
  end

  describe 'before_create callback' do
    # Need non-persisted partner to trigger before_create callback
    let(:callback_partner) { build(:partner) }

    describe '#set_defaults' do
      describe 'status' do
        let!(:under_revision_status) { Status.find_by_name('Under Revision') }
        let(:active_status) { Status.find_by_name('Active') }

        it 'defaults status to Under Revision' do
          callback_partner.save!
          expect(callback_partner.status).to eq under_revision_status
        end

        it 'sets non-default status when specified' do
          callback_partner.status = active_status
          callback_partner.save!
          expect(callback_partner.status).to eq active_status
        end
      end

      describe 'start_date' do
        it 'defaults start_date to current date' do
          callback_partner.save!
          expect(callback_partner.partnership_start_date).to eq Date.current
        end

        it 'sets non-default date when specified' do
          callback_partner.partnership_start_date = Date.yesterday
          callback_partner.save!
          expect(callback_partner.partnership_start_date).to eq Date.yesterday
        end
      end
    end

    describe '#generate_osra_num' do
      it 'generates an osra id on create' do
        callback_partner.save!
        expect(callback_partner.osra_num).to be
      end

      it 'sets the first two digits of osra_num to province code' do
        callback_partner.save!
        expect(callback_partner.osra_num[0..1]).to eq callback_partner.province.code.to_s
      end

      it 'sets the last three digits of osra_num to a number generated by the "sequenced" gem' do
        callback_partner.sequential_id = 999
        callback_partner.save!
        expect(callback_partner.osra_num[2..-1]).to eq '999'
      end
    end
  end
end
